// S and T - input strings
// You need to check if string T is present in S or not
#include<bits/stdc++.h>
using namespace std;
int * getlps(char s[])
{
    int n=strlen(s);
    int *arr=new int[n];
    arr[0]=0;
    int i=1,j=0;
    while(i<n)
    {
        if(s[i]==s[j])
        {
            arr[i]=j+1;
            i++;
            j++;
        }
        else
        {
            if(j!=0)
            {
                j=arr[j-1];
            }
            else
            {
                arr[i]=0;
                i++;
            }
        }
    }
    return arr;
    
}
int p_solver(char s[],char t[])
{
    int slen=strlen(s);
    int tlen=strlen(t);
    
    int *arr=getlps(s);
    int i=0,j=0;
    int r=0;
    
    while(i<slen && j<tlen)
    {
        if(s[i]==t[j])
        {
            
            i++;
            j++;
        }
        else
        {
            if(j!=0)
            {
               j= arr[j-1];
                
            }
            else
            {
                i++;
            }
        }
    }
    if(j==tlen)
    {
        return (i-j);//(i-j) because to know the position of index;
    }
    else
    {
        return -1;
    }
    
}

int findString(char s[], char t[]) {
    // Write your code here
    
    int n=p_solver(s,t);
    
    if(n==-1)
    {
        return -1;
    }
    else{
        return n;
    }
    
    
    

} 
